import puppeteer from 'puppeteer';
import { logger } from './logger';

export async function generatePDF(
  node: any, 
  options: { includeImages?: boolean; includeMetrics?: boolean } = {}
): Promise<Buffer> {
  const { includeImages = true, includeMetrics = true } = options;
  
  let browser = null;
  
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    const html = generateNodeHTML(node, { includeImages, includeMetrics });
    await page.setContent(html, { waitUntil: 'networkidle0' });
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20px',
        right: '20px',
        bottom: '20px',
        left: '20px'
      }
    });
    
    return pdfBuffer;
  } catch (error) {
    logger.error('PDF generation failed:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    throw new Error(`PDF generation failed: ${errorMessage}`);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

function generateNodeHTML(
  node: any, 
  options: { includeImages?: boolean; includeMetrics?: boolean }
): string {
  const { includeImages, includeMetrics } = options;
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Parallel Life Report</title>
      <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
        .header { text-align: center; margin-bottom: 30px; }
        .cover-image { max-width: 100%; height: 200px; object-fit: cover; border-radius: 8px; }
        .summary { font-size: 18px; font-weight: 500; margin: 20px 0; }
        .chapter { margin: 30px 0; }
        .chapter h3 { color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px; }
        .metrics-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; }
        .metric-card { padding: 15px; background: #f9fafb; border-radius: 8px; }
        .metric-value { font-size: 24px; font-weight: bold; color: #059669; }
        .disclaimer { font-size: 12px; color: #6b7280; font-style: italic; margin-top: 20px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Parallel Life Report</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
        ${includeImages && node.media?.coverPhoto?.url ? 
          `<img src="${node.media.coverPhoto.url}" alt="Cover" class="cover-image" />` : ''}
      </div>
      
      <div class="summary">
        ${node.aiNarrative?.summary || 'No summary available'}
      </div>
      
      <div class="chapters">
        ${node.aiNarrative?.chapters?.map((chapter: any) => `
          <div class="chapter">
            <h3>${chapter.title}</h3>
            <p>${chapter.content}</p>
            ${chapter.highlights ? 
              `<ul>${chapter.highlights.map((h: string) => `<li>${h}</li>`).join('')}</ul>` : ''}
          </div>
        `).join('') || '<p>No chapters available</p>'}
      </div>
      
      ${includeMetrics ? `
        <div class="metrics">
          <h2>Life Metrics</h2>
          <div class="metrics-grid">
            <div class="metric-card">
              <div class="metric-value">${node.metrics?.qualityOfLifeIndex?.toFixed(1) || 'N/A'}</div>
              <div>Quality of Life Index</div>
            </div>
            <div class="metric-card">
              <div class="metric-value">${node.metrics?.happinessScore?.toFixed(1) || 'N/A'}</div>
              <div>Happiness Score</div>
            </div>
            <div class="metric-card">
              <div class="metric-value">${node.metrics?.city?.name || 'Unknown'}</div>
              <div>City</div>
            </div>
            <div class="metric-card">
              <div class="metric-value">${node.metrics?.occupation?.name || 'Unknown'}</div>
              <div>Occupation</div>
            </div>
          </div>
        </div>
      ` : ''}
      
      <div class="disclaimer">
        This report is generated by AI and should be considered for entertainment purposes only.
        ${node.aiNarrative?.disclaimers?.join(' ') || ''}
      </div>
    </body>
    </html>
  `;
}